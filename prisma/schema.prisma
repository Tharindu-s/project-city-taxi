// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//admin Table
model Admin {
  id      Int    @id @default(autoincrement())
  name    String
  status  String
  regDate String
  userId  Int    @unique
}

// //guest table
// model Guest {
//   id         Int     @id @default(autoincrement())
//   name       String?
//   email      String? @unique
//   phone      String?
//   city       String
//   photoUrl   String?
//   type       String
//   gender     String?
//   isVerified Boolean @default(false)
// }

//users table
model Users {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  username String   @unique
  password String
  type     String
  regDate  DateTime
  guestId  Int
}

//Google Map & Tour Details
model Ride {
  id             Int    @id @default(autoincrement())
  pickupLocation String
  dropLocation   String
  status         String
  startTime      String
  endTime        String
  amount         String
  distant        String
  paymentMethod  String
  vehicleId      String
  passengerId    String
  driverId       String
}

model Rate {
  id   Int    @id @default(autoincrement())
  rate String
}

// Driver Rating
model RideRating {
  id             Int    @id @default(autoincrement())
  rating         String
  comment        String
  safeDrive      String
  professional   String
  routeExpertise String
  onTime         String
  vehicleState   String
  driverId       String
  rideId         String
}

// Passenger Details
model PassengerDetails {
  id         Int     @id @default(autoincrement())
  name       String
  email      String  @unique
  contact    String
  userId     Int?    @unique
  city       String
  photoUrl   String
  gender     String
  type       String  @default("passenger")
  isVerified Boolean @default(false)
}

// Driver Details
model DriverDetails {
  id         Int      @id @default(autoincrement())
  name       String
  email      String?  @unique
  nic        String
  city       String
  dob        String
  status     String?  @default("available")
  date       DateTime
  imgUrl     String
  contact    String
  licenceNo  String
  vehicleId  String?
  type       String   @default("driver")
  gender     String
  userId     Int?     @unique
  isVerified Boolean  @default(false)
  location   String?
}

// Vehicle Details
model vehicleDetails {
  id            Int     @id @default(autoincrement())
  number        String  @unique
  type          String
  seatCount     Int
  imgUrl1       String
  imgUrl2       String
  imgUrl3       String
  make          String
  rateId        String?
  revLicenceUrl String
  revLicenceExp String
  insuaranceNo  String
  insuaranceExp String
  driverId      String
}

// model Post {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   title     String   @db.VarChar(255)
//   content   String?
//   published Boolean  @default(false)
//   author    User     @relation(fields: [authorId], references: [id])
//   authorId  Int
// }
